name: Build ROM

on:
  workflow_dispatch:
    inputs:
      cleanstrategy:
        description: 'Select Clean strategy'
        required: true
        default: 'no'
        type: choice
        options:
          - nope
          - installclean
          - clobber

env:
  RELEASE_GITHUB_TOKEN: ${{ secrets.RELEASE_GITHUB_TOKEN }}
  TG_TOKEN: ${{ secrets.TG_TOKEN }}
  TG_CHAT: ${{ secrets.TG_CHAT }}

# queue up builds to prevent failures on progress of other builds
concurrency:
  group: building_rom
  cancel-in-progress: false

jobs:
  build:
    timeout-minutes: 2400
    runs-on: self-hosted
    environment:
      name: Builder

    steps:
      - name: Clean Strategy
        run: |
          cd ~/rising/
          if [[ ${{ github.event.inputs.cleanstrategy }} == "installclean" ]]; then
            echo "Make install clean"
            source build/envsetup.sh && lunch lineage_vayu-userdebug && make installclean
          elif [[ ${{ github.event.inputs.cleanstrategy }} == "clobber" ]]; then
            echo "Make clobber"
            source build/envsetup.sh && lunch lineage_vayu-userdebug && make clobber
          elif [[ ${{ github.event.inputs.cleanstrategy }} == "nope" ]]; then
            echo "DIRTY BUILD"
          fi

      - name: Checkout
        run: |
          cd ~/rising/
          rm -rf __rom-build_scripts__
          git_branch=$(echo ${{ github.ref }} | sed 's/refs\/heads\///')
          echo "Branch: $git_branch"
          git clone ${{ github.server_url }}/${{ github.repository }} __rom-build_scripts__ -b $git_branch --depth 1 --single-branch

      - name: Build
        run: |
          cd ~/rising/
          source __rom-build_scripts__/._env
          required_files=( _utils.sh _build.sh ._env $REPOS_JSON )
          rm -rf "${required_files[@]}"
          for file in "${required_files[@]}"; do
            if [ ! -f "__rom-build_scripts__/$file" ]; then
              echo "File $file not found!"
              exit 1
            fi
            cp -r "__rom-build_scripts__/$file" .
          done
          chmod +x _build.sh
          ./_build.sh

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Logs
          path: '*.log'
